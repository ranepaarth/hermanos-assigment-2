// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  User
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          UserRole    @default(User)
  resumeUrl     String?   @default("")

  jobPost JobPost[]

  jobsApplied JobPostUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobCategory {
  id String @id @default(cuid())
  name String @unique
  jobs JobPost[]
}

model JobPost {
  id String @id @default(cuid())
  companyName String
  title String
  companyDesc String
  jobDesc String
  categoryId String @unique
  category JobCategory @relation(fields: [categoryId],references: [id])
  type String
  salary String
  skills String
  experience String
  
  adminEmail String @unique
  postedBy User @relation(fields: [adminEmail],references: [email])




  users JobPostUser[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ApplicationStatus {
  Applied
  Accepted
  Rejected
}

model JobPostUser {
  id String @id @default(cuid())
  jobPostId String  
  userId  String
  applicationStatus ApplicationStatus @default(Applied)  
  dateApplied DateTime @default(now())

  jobPost JobPost @relation(fields: [jobPostId],references: [id])
  user User @relation(fields: [userId],references: [id])

  @@unique([userId,jobPostId])
}
